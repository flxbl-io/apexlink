"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SFDXCommand = void 0;
const ExecuteCommand_1 = __importDefault(require("./commandExecutor/ExecuteCommand"));
const sfp_logger_1 = __importStar(require("@flxbl-io/sfp-logger"));
class SFDXCommand {
    constructor(target_org, project_directory, logger, logLevel) {
        this.target_org = target_org;
        this.project_directory = project_directory;
        this.logger = logger;
        this.logLevel = logLevel;
    }
    async exec(quiet = true, timeout = 0, showProgress = false) {
        let command = this.getSFDXCommand();
        //add log level to error
        command += ' --loglevel=ERROR';
        if (quiet)
            command += ` --json`;
        command += ' ' + this.getGeneratedParams();
        sfp_logger_1.default.log('Generated Command:' + command, sfp_logger_1.LoggerLevel.TRACE, this.logger);
        let executor = new ExecuteCommand_1.default(this.logger, this.logLevel, showProgress);
        //CLI writes errors to Output Stream during errors in JSON Mode, so if quiet is true, use swap output for error
        let output = await executor.execCommand(command, this.project_directory, timeout, quiet);
        if (quiet) {
            return JSON.parse(output).result;
        }
        return output;
    }
    getGeneratedSFDXCommandWithParams() {
        let command = this.getSFDXCommand();
        command += ' ' + this.getGeneratedParams();
        return command;
    }
}
exports.SFDXCommand = SFDXCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0ZEWENvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU0ZEWENvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzRkFBOEQ7QUFDOUQsbUVBQXNFO0FBRXRFLE1BQXNCLFdBQVc7SUFDN0IsWUFDYyxVQUFrQixFQUNsQixpQkFBeUIsRUFDekIsTUFBZSxFQUNmLFFBQXNCO1FBSHRCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQVM7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFjO0lBQ2pDLENBQUM7SUFFRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQWdCLElBQUksRUFBRSxVQUFrQixDQUFDLEVBQUUsZUFBd0IsS0FBSztRQUN0RixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDcEMsd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQztRQUUvQixJQUFJLEtBQUs7WUFBRSxPQUFPLElBQUksU0FBUyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFFM0Msb0JBQVMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsT0FBTyxFQUFFLHdCQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RSxJQUFJLFFBQVEsR0FBbUIsSUFBSSx3QkFBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM1RiwrR0FBK0c7UUFDL0csSUFBSSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pGLElBQUksS0FBSyxFQUFFO1lBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNwQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxpQ0FBaUM7UUFDcEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDM0MsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUtKO0FBbkNELGtDQW1DQyJ9
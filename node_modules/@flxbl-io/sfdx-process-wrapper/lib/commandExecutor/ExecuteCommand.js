"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const sfp_logger_1 = __importStar(require("@flxbl-io/sfp-logger"));
const DefaultProcessOptions_1 = __importDefault(require("./DefaultProcessOptions"));
class ExecuteCommand {
    constructor(logger, logLevel, showProgress) {
        this.logger = logger;
        this.logLevel = logLevel;
        this.showProgress = showProgress;
    }
    execCommand(command, workingdirectory, timeout = 0, isEnableErrorFromOutputStream = false) {
        return new Promise((resolve, reject) => {
            try {
                let childProcess;
                childProcess = child_process.exec(command, {
                    cwd: workingdirectory,
                    timeout: timeout,
                    ...(0, DefaultProcessOptions_1.default)(),
                });
                // variables for collecting data written to STDOUT and STDERR
                let stdoutContents = '';
                let stderrContents = '';
                // collect data written to STDOUT into a string
                childProcess.stdout.on('data', (data) => {
                    stdoutContents += data.toString();
                    if (this.showProgress)
                        sfp_logger_1.default.log((0, sfp_logger_1.COLOR_TRACE)(data), sfp_logger_1.LoggerLevel.INFO, this.logger);
                });
                // collect data written to STDERR into a string
                childProcess.stderr.on('data', (data) => {
                    stderrContents += data.toString();
                });
                childProcess.once('close', (code, signal) => {
                    if (code === 0 || (code === null && signal === 'SIGTERM')) {
                        resolve(stdoutContents);
                    }
                    else {
                        if (stderrContents && !isEnableErrorFromOutputStream)
                            reject(new Error(stderrContents));
                        else
                            reject(new Error(stdoutContents));
                    }
                });
                childProcess.once('error', (err) => {
                    if (stderrContents && !isEnableErrorFromOutputStream)
                        reject(new Error(stderrContents));
                    else
                        reject(new Error(stdoutContents));
                });
            }
            catch (error) {
                reject(error);
            }
        });
    }
}
exports.default = ExecuteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhlY3V0ZUNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZEV4ZWN1dG9yL0V4ZWN1dGVDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBZ0Q7QUFDaEQsbUVBQW1GO0FBQ25GLG9GQUE0RDtBQUc1RCxNQUFxQixjQUFjO0lBQy9CLFlBQTZCLE1BQWUsRUFBWSxRQUFzQixFQUFZLFlBQXNCO1FBQW5GLFdBQU0sR0FBTixNQUFNLENBQVM7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFjO1FBQVksaUJBQVksR0FBWixZQUFZLENBQVU7SUFBRyxDQUFDO0lBRTdHLFdBQVcsQ0FDZCxPQUFlLEVBQ2YsZ0JBQXdCLEVBQ3hCLFVBQWtCLENBQUMsRUFDbkIsZ0NBQXlDLEtBQUs7UUFFOUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxJQUFJO2dCQUNBLElBQUksWUFBWSxDQUFDO2dCQUVqQixZQUFZLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ3ZDLEdBQUcsRUFBRSxnQkFBZ0I7b0JBQ3JCLE9BQU8sRUFBRSxPQUFPO29CQUNoQixHQUFHLElBQUEsK0JBQXFCLEdBQUU7aUJBQzdCLENBQUMsQ0FBQztnQkFFSCw2REFBNkQ7Z0JBQzdELElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztnQkFDeEIsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO2dCQUV4QiwrQ0FBK0M7Z0JBQy9DLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO29CQUNwQyxjQUFjLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNsQyxJQUFJLElBQUksQ0FBQyxZQUFZO3dCQUFFLG9CQUFTLENBQUMsR0FBRyxDQUFDLElBQUEsd0JBQVcsRUFBQyxJQUFJLENBQUMsRUFBRSx3QkFBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNGLENBQUMsQ0FBQyxDQUFDO2dCQUVILCtDQUErQztnQkFDL0MsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3BDLGNBQWMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RDLENBQUMsQ0FBQyxDQUFDO2dCQUVILFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxFQUFFO29CQUN4RCxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLENBQUMsRUFBRTt3QkFDdkQsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3FCQUMzQjt5QkFBTTt3QkFDSCxJQUFJLGNBQWMsSUFBSSxDQUFDLDZCQUE2Qjs0QkFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQzs7NEJBQ25GLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO3FCQUMxQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFFSCxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQVUsRUFBRSxFQUFFO29CQUN0QyxJQUFJLGNBQWMsSUFBSSxDQUFDLDZCQUE2Qjt3QkFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQzs7d0JBQ25GLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxDQUFDLENBQUMsQ0FBQzthQUNOO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ1osTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2pCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFwREQsaUNBb0RDIn0=